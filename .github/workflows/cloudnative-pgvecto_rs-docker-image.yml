name: cloudnative-pgvecto.rs build and release

on:
  workflow_dispatch:
  push:
    branches: [ "mainline" ]
    paths:
      - containers/cloudnative-pgvecto.rs/**
      - .github/workflows/cloudnative-pgvecto_rs-docker-image.yml
  pull_request:
    branches: [ "mainline" ]
    paths:
      - containers/cloudnative-pgvecto.rs/**
      - .github/workflows/cloudnative-pgvecto_rs-docker-image.yml

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-versions.outputs.result }}
    steps:
     - name: Checkout to repository
       uses: actions/checkout@v4
     - name: Get dependency versions
       uses: mikefarah/yq@v4.45.1
       id: get-versions
       with:
        cmd: yq eval -o=json -I=0 containers/cloudnative-pgvecto.rs/versions.yml

  build:
    runs-on: ubuntu-latest
    needs: configure
    strategy:
      # Prevent a failure in one image from stopping the other builds
      fail-fast: false
      matrix: ${{ fromJson(needs.configure.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version change
        id: changed-version
        uses: tj-actions/changed-files@v45
        with:
          files: containers/cloudnative-pgvecto.rs/versions.yml

      - name: Determine image push
        uses: actions/github-script@v7
        id: should-release
        with:
          script: |
            if (context.eventName == "pull_request") return false;
            if (context.eventName == "workflow_dispatch") return true;
            return "${{ steps.changed-version.outputs.any_changed }}" == "true";

      - name: Set major postgres version
        id: version
        run: |
          pg_major=$(echo ${{ matrix.cnpg }} | cut -d'.' -f1)
          echo "pg_major=$pg_major" >> "$GITHUB_OUTPUT"

      - name: Generate docker image tags
        id: metadata
        uses: docker/metadata-action@v5
        with:
          flavor: |
            # Disable latest tag
            latest=false
          images: |
            name=ghcr.io/layertwo/cloudnative-pgvecto-rs
          tags: |
            type=raw,value=${{ matrix.cnpg }}-${{ matrix.pgvectors }},enable=${{ steps.should-release.outputs.result }}
            type=raw,value=${{ steps.version.outputs.pg_major }}-${{ matrix.pgvectors }},enable=${{ steps.should-release.outputs.result }}
            type=raw,value=${{ matrix.cnpg }},enable=${{ steps.should-release.outputs.result }}
            type=raw,value=${{ steps.version.outputs.pg_major }},enable=${{ steps.should-release.outputs.result }}

      - name: Build and push image
        id: build-and-push
        uses: docker/build-push-action@v6.14.0
        with:
          context: containers/cloudnative-pgvecto.rs
          platforms: linux/amd64,linux/arm64
          push: ${{ !github.event.pull_request.head.repo.fork && steps.metadata.outputs.tags != '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            CNPG_TAG=${{ matrix.cnpg }}
            PGVECTORS_TAG=${{ matrix.pgvectors }}

  results:
      if: ${{ always() }}
      runs-on: ubuntu-latest
      name: results
      needs: [build]
      steps:
        - run: |
            result="${{ needs.build.result }}"
            if [[ $result == "success" || $result == "skipped" ]]; then
              exit 0
            else
              exit 1
            fi
